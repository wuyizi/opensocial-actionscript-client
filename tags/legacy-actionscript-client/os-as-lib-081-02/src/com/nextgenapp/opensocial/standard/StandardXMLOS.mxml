<?xml version="1.0" encoding="utf-8"?>
<!-- StandardXMLOS maps Actionscript requests to Javascript Requests -->
<mx:XMLListCollection xmlns:mx="http://www.adobe.com/2006/mxml" >
		<!-- Setting up static functions here -->
		<mx:XML id="init">
		<script>
        <![CDATA[
            function(){
                //Create a name space for our global function
                //if it doesn't already exists
                try {
                    NextGenApp;
                } catch(e) {
                    NextGenApp = new Object(); 
                }

				//TODO: checks to see if the variable exists before defining it
				
                NextGenApp.fillPeopleRequestFields = function (parameter) {
                    	var params = new Array();
                    	for (i in parameter){
                    		switch(parameter[i]){
                    		case 'ABOUT_ME':
                    			params[i] = opensocial.Person.Field.ABOUT_ME;
                    			break;
                    		case 'ACTIVITIES':
                    			params[i] = opensocial.Person.Field.ACTIVITIES;
                    			break;
                    		case 'ADDRESSES':
                    			params[i] = opensocial.Person.Field.ADDRESSES;
                    			break;
                    		case 'AGE':
                    			params[i] = opensocial.Person.Field.AGE;
                    			break;
                    		case 'BODY_TYPE':
                    			params[i] = opensocial.Person.Field.BODY_TYPE;
                    			break;
                    		case 'BOOKS':
                    			params[i] = opensocial.Person.Field.BOOKS;
                    			break;
                    		case 'CARS':
                    			params[i] = opensocial.Person.Field.CARS;
                    			break;
                    		case 'CHILDREN':
                    			params[i] = opensocial.Person.Field.CHILDREN;
                    			break;
                    		case 'CURRENT_LOCATION':
                    			params[i] = opensocial.Person.Field.CURRENT_LOCATION;
                    			break;
                    		case 'DATE_OF_BIRTH':
                    			params[i] = opensocial.Person.Field.DATE_OF_BIRTH;
                    			break;
                    		case 'DRINKER':
                    			params[i] = opensocial.Person.Field.DRINKER;
                    			break;
                    		case 'EMAILS':
                    			params[i] = opensocial.Person.Field.EMAILS;
                    			break;
                    		case 'ETHNICITY':
                    			params[i] = opensocial.Person.Field.ETHNICITY;
                    			break;
                    		case 'FASHION':
                    			params[i] = opensocial.Person.Field.FASHION;
                    			break;
                    		case 'FOOD':
                    			params[i] = opensocial.Person.Field.FOOD;
                    			break;
                    		case 'GENDER':
                    			params[i] = opensocial.Person.Field.GENDER;
                    			break;
                    		case 'HAPPIEST_WHEN':
                    			params[i] = opensocial.Person.Field.HAPPIEST_WHEN;
                    			break;
                    		case 'HAS_APP':
                    			params[i] = opensocial.Person.Field.HAS_APP;
                    			break;
                    		case 'HEROES':
                    			params[i] = opensocial.Person.Field.HEROES;
                    			break;
                    		case 'HUMOR':
                    			params[i] = opensocial.Person.Field.HUMOR;
                    			break;
                    		case 'ID':
                    			params[i] = opensocial.Person.Field.ID;
                    			break;
                    		case 'INTERESTS':
                    			params[i] = opensocial.Person.Field.INTERESTS;
                    			break;
                    		case 'JOB_INTERESTS':
                    			params[i] = opensocial.Person.Field.JOB_INTERESTS;
                    			break;
                    		case 'JOBS':
                    			params[i] = opensocial.Person.Field.JOBS;
                    			break;
                    		case 'LANGUAGES_SPOKEN':
                    			params[i] = opensocial.Person.Field.LANGUAGES_SPOKEN;
                    			break;
                    		case 'LIVING_ARRANGEMENT':
                    			params[i] = opensocial.Person.Field.LIVING_ARRANGEMENT;
                    			break;
                    		case 'LOOKING_FOR':
                    			params[i] = opensocial.Person.Field.LOOKING_FOR;
                    			break;
                    		case 'MOVIES':
                    			params[i] = opensocial.Person.Field.MOVIES;
                    			break;
                    		case 'MUSIC':
                    			params[i] = opensocial.Person.Field.MUSIC;
                    			break;
                    		case 'NAME':
                    			params[i] = opensocial.Person.Field.NAME;
                    			break;
                    		case 'NETWORK_PRESENCE':
                    			params[i] = opensocial.Person.Field.NETWORK_PRESENCE;
                    			break;
                    		case 'NICKNAME':
                    			params[i] = opensocial.Person.Field.NICKNAME;
                    			break;
                    		case 'PETS':
                    			params[i] = opensocial.Person.Field.PETS;
                    			break;
                    		case 'PHONE_NUMBERS':
                    			params[i] = opensocial.Person.Field.PHONE_NUMBERS;
                    			break;
                    		case 'POLITICAL_VIEWS':
                    			params[i] = opensocial.Person.Field.POLITICAL_VIEWS;
                    			break;
                    		case 'PROFILE_SONG':
                    			params[i] = opensocial.Person.Field.PROFILE_SONG;
                    			break;
                    		case 'PROFILE_URL':
                    			params[i] = opensocial.Person.Field.PROFILE_URL;
                    			break;
                    		case 'PROFILE_VIDEO':
                    			params[i] = opensocial.Person.Field.PROFILE_VIDEO;
                    			break;
                    		case 'QUOTES':
                    			params[i] = opensocial.Person.Field.QUOTES;
                    			break;
                    		case 'RELATIONSHIP_STATUS':
                    			params[i] = opensocial.Person.Field.RELATIONSHIP_STATUS;
                    			break;
                    		case 'RELIGION':
                    			params[i] = opensocial.Person.Field.RELIGION;
                    			break;
                    		case 'ROMANCE':
                    			params[i] = opensocial.Person.Field.ROMANCE;
                    			break;
                    		case 'SCARED_OF':
                    			params[i] = opensocial.Person.Field.SCARED_OF;
                    			break;
                    		case 'SCHOOLS':
                    			params[i] = opensocial.Person.Field.SCHOOLS;
                    			break;
                    		case 'SEXUAL_ORIENTATION':
                    			params[i] = opensocial.Person.Field.SEXUAL_ORIENTATION;
                    			break;
                    		case 'SMOKER':
                    			params[i] = opensocial.Person.Field.SMOKER;
                    			break;
                    		case 'SPORTS':
                    			params[i] = opensocial.Person.Field.SPORTS;
                    			break;
                    		case 'STATUS':
                    			params[i] = opensocial.Person.Field.STATUS;
                    			break;
                    		case 'TAGS':
                    			params[i] = opensocial.Person.Field.TAGS;
                    			break;
                    		case 'THUMBNAIL_URL':
                    			params[i] = opensocial.Person.Field.THUMBNAIL_URL;
                    			break;
                    		case 'TIME_ZONE':
                    			params[i] = opensocial.Person.Field.TIME_ZONE;
                    			break;
                    		case 'TURN_OFFS':
                    			params[i] = opensocial.Person.Field.TURN_OFFS;
                    			break;
                    		case 'TURN_ONS':
                    			params[i] = opensocial.Person.Field.TURN_ONS;
                    			break;
                    		case 'TV_SHOWS':
                    			params[i] = opensocial.Person.Field.TV_SHOWS;
                    			break;
                    		case 'URLS':
                    			params[i] = opensocial.Person.Field.URLS;
                    			break;
                    		default:
                    			params[i] = params[i];
                    			alert('params field not found: '+i+'.  value='+params[i]);
                    			break;
                    		}
                    	}//for
                    	return params;
                    }//getOSParams
            }
        ]]>
	    </script>
		</mx:XML>

		<!-- Start of OPENSOCIAL CALLS here -->
	   	<mx:XML id="fetchPersonRequest" xmlns="http://www.nextgenapp.com/opensocial/flex/api" >  
   		<script>
		<![CDATA[
			function(objParam)
			{	
				function fetchPerson(oParam){  	
					
					if (oParam.view == 'VIEWER') {
						oParam.view = opensocial.IdSpec.PersonId.VIEWER;
					} else if (oParam.view == 'OWNER') {
						oParam.view = opensocial.IdSpec.PersonId.OWNER;
					}
					
				
					//var os = opensocial.Container.get(); // probably don't need this line
	  				var dataRequest = opensocial.newDataRequest();
	  				var param = {};
	  				//lets fill out the params
	  				if ( oParam.params != undefined ){
		  				for (var i in oParam.params){
		  					switch (i){
		  					case 'PROFILE_DETAILS':
		  						param[opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS] = NextGenApp.fillPeopleRequestFields(oParam.params[i]);
		  						//use this as cache for the response
		  						oParam.osParam = param[opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS];
		  					break;
		  					default:
		  						//not supported. throw an exception
		  						var mesg = "Error. DataRequest.PeopleRequestFields = " + i + " is not supported.";
		  						throw mesg;
		  					}//switch
		  				}//for
	  				}
					
					var OWNERReq = dataRequest.newFetchPersonRequest(oParam.view, param);
					dataRequest.add(OWNERReq, oParam.view);
					dataRequest.send(getResponse);

					function getResponse(response)
					{
						//alert('getResponse(): flash obj name='+oParam.name+'.  view='+oParam.view+".  response="+response);
						
						var flashobj = document.getElementById(oParam.name);
						var OWNER = response.get(oParam.view).getData();
						//alert('owner='+OWNER);
						if ( OWNER != null ){
							var returnData = {};
							returnData.data = {};
							//tells whether viewer or owner
							returnData.isViewer = OWNER.isViewer();
							//alert('isviewer()=' + OWNER.isViewer());
							returnData.isOwner = OWNER.isOwner();
							//alert('isOwner()=' + OWNER.isOwner());
							//returnData.errorMessage = response.getErrorMessage();
							//returnData.hadError = response.hadError();
							returnData.owner = {};
							returnData.owner.name = OWNER.getField(opensocial.Person.Field.NAME);
							returnData.owner.age = OWNER.getField(opensocial.Person.Field.AGE);
							returnData.owner.myArray = ['AGE', 'NAME', 'FIELD'];
							returnData.owner.osParam = oParam.osParam;
	
	
	
	  						//get the array of the profile details
	  						var profDet = oParam.params['PROFILE_DETAILS'];
	  						for (var j in profDet){
	  							switch(profDet[j]) {
	  							case 'NAME':
	  								var tmpName = OWNER.getField(oParam.osParam[j]);
	  								returnData.data['NAME'] = {};
	  								returnData.data['NAME'].ADDITIONAL_NAME = tmpName.getField(opensocial.Name.Field.ADDITIONAL_NAME);
	  								returnData.data['NAME'].FAMILY_NAME = tmpName.getField(opensocial.Name.Field.FAMILY_NAME);
	  								returnData.data['NAME'].GIVEN_NAME = tmpName.getField(opensocial.Name.Field.GIVEN_NAME);
	  								returnData.data['NAME'].HONORIFIC_PREFIX = tmpName.getField(opensocial.Name.Field.HONORIFIC_PREFIX);
	  								returnData.data['NAME'].HONORIFIC_SUFFIX = tmpName.getField(opensocial.Name.Field.HONORIFIC_SUFFIX);
	  								returnData.data['NAME'].UNSTRUCTURED = tmpName.getField(opensocial.Name.Field.UNSTRUCTURED);
	  								
	  							break;
	  							//case 'GENDER':
	  							//	var tmpGender = OWNER.getField(oParam.osParam[j]);
	  							//	returnData.data['GENDER'] = {};
	  							//	returnData.data['GENDER'].key = tmpGender.getKey();
	  							//	returnData.data['GENDER'].displayValue = tmpGender.getDisplayValue();
	  							//break;
	  							default:
	  								var tmpProp = OWNER.getField(oParam.osParam[j]);
	  								// if it is Enum object (eg. gender) (note: opensocial uses "gender" for field name, but our Flex constant currently uses "GENDER"
	  								if (tmpProp instanceof opensocial.Enum) {  									
	  									//alert('param=' + oParam.osParam[j]);
	 	 								returnData.data[profDet[j]] = {};
	  									returnData.data[profDet[j]].key = tmpProp.getKey();
	  									returnData.data[profDet[j]].displayValue = tmpProp.getDisplayValue();
	  								} else {
	  									returnData.data[profDet[j]] = OWNER.getField(oParam.osParam[j]);
	  								}
	  							break;
	  							} // switch  							
	  						} // for
	  					}else {
	  						var respItem = response.get(oParam.view);
	  						//alert('respItem.errorCode=' + respItem.getErrorCode());
	  						//alert('respItem.errorMessage=' + respItem.getErrorMessage());
	  						//alert('response error = ' + response.getErrorMessage());
	  						//alert('response hadError = ' + response.hadError());
	  						returnData = {};
	  						returnData.errorMessage = "Person returned is null.  App not installed";
							returnData.hadError = response.hadError();
							//alert('done');
	  					}

					  	flashobj.fetchPersonRequestCallback(returnData);
				  	}//getResponse
				  	
			  	}//fetchPerson
			  	
			  	fetchPerson(objParam);
			  }
		]]>
		</script>
   	</mx:XML> 
   	<mx:XML id="fetchPeopleRequest" xmlns="http://www.nextgenapp.com/opensocial/flex/api" >
   		<script>
		<![CDATA[
		function(objParam)
			{	
				function fetchPeopleRequest(oParam){
					//get the idspec
					if ( (oParam.IdSpec['USER_ID'] == undefined) || 
						 (oParam.IdSpec['GROUP_ID'] == undefined) ){
						 throw 'Cannot execute people request due to user id or group id not defined';
					}
					var idspec_params = {};
					idspec_params[opensocial.IdSpec.Field.USER_ID] = oParam.IdSpec['USER_ID'];
					idspec_params[opensocial.IdSpec.Field.GROUP_ID] = oParam.IdSpec['GROUP_ID'];
					
					if ( oParam.IdSpec['NETWORK_DISTANCE'] != undefined ){
						idspec_params[opensocial.IdSpec.Field.NETWORK_DISTANCE] = oParam.IdSpec['NETWORK_DISTANCE'];
					}

					var idspec = opensocial.newIdSpec(idspec_params);
					var opt_params = {};
					//create the optional parameters
					for (var myProp in oParam.params){
						switch (myProp){
						case 'FILTER':
							opt_params[opensocial.DataRequest.PeopleRequestFields.FILTER] = oParam.params[myProp];
						break;
						case 'FIRST':
							opt_params[opensocial.DataRequest.PeopleRequestFields.FIRST] = oParam.params[myProp];
						break;
						case 'MAX':
							opt_params[opensocial.DataRequest.PeopleRequestFields.MAX] = oParam.params[myProp];
						break;
						case 'FILTER_OPTIONS':
							opt_params[opensocial.DataRequest.PeopleRequestFields.FILTER_OPTIONS] = oParam.params[myProp];
						break;
						case 'PROFILE_DETAILS':
							opt_params[opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS] = NextGenApp.fillPeopleRequestFields(oParam.params[myProp]);
							//use this as cache for the response
		  					oParam.osParam = opt_params[opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS];
						break;
						case 'SORT_ORDER':
							opt_params[opensocial.DataRequest.PeopleRequestFields.SORT_ORDER] = oParam.params[myProp];
						break;
						default:
							//ignore
						}//switch
					}//for
					var req = opensocial.newDataRequest();
	  				req.add(req.newFetchPeopleRequest(idspec, opt_params), oParam.drAddOptKey);
					req.send(fetchPeopleHandler);

					function fetchPeopleHandler(response)
					{
						var flashobj = document.getElementById(oParam.name);
						var returnData = {};
						returnData.data = {};
						var viewerFriendsResp = response.get(oParam.drAddOptKey); // use the key passed with the request to "get" the appropriate data

	  				    if (!viewerFriendsResp.hadError()) { // always verify whether your request was successful
						    var viewerFriends = viewerFriendsResp.getData();
						    var count=0;
						    viewerFriends.each( // each method is used to iterate through every object in collection
						      function(person) { // anonymous function is called once for every object in collection
						      	//alert("Calling person... count = " + count + ", person = " + person.getDisplayName());
						        returnData.data[count] = {};
						        returnData.data[count].pAttr = {};
						        returnData.data[count].isOwner = person.isOwner();
						        returnData.data[count].isViewer = person.isViewer();
						        //alert("returnData owner = " + returnData.data[count].isOwner + ", viewer = " + returnData.data[count].isViewer);
						        //get the array of the profile details
  								var profDet = oParam.params['PROFILE_DETAILS'];
  								for (var j in profDet){
  									switch(profDet[j]) {
  										case 'NAME':
  											var tmpName = person.getField(oParam.osParam[j]);
  											returnData.data[count].pAttr['NAME'] = {};
			  								returnData.data[count].pAttr['NAME'].ADDITIONAL_NAME = tmpName.getField(opensocial.Name.Field.ADDITIONAL_NAME);
			  								returnData.data[count].pAttr['NAME'].FAMILY_NAME = tmpName.getField(opensocial.Name.Field.FAMILY_NAME);
			  								returnData.data[count].pAttr['NAME'].GIVEN_NAME = tmpName.getField(opensocial.Name.Field.GIVEN_NAME);
			  								returnData.data[count].pAttr['NAME'].HONORIFIC_PREFIX = tmpName.getField(opensocial.Name.Field.HONORIFIC_PREFIX);
			  								returnData.data[count].pAttr['NAME'].HONORIFIC_SUFFIX = tmpName.getField(opensocial.Name.Field.HONORIFIC_SUFFIX);
			  								returnData.data[count].pAttr['NAME'].UNSTRUCTURED = tmpName.getField(opensocial.Name.Field.UNSTRUCTURED);
  										break;
			  							default:
			  								var tmpProp = person.getField(oParam.osParam[j]);
			  								//alert("Property = " + tmpProp + " for " + oParam.osParam[j]);
			  								// if it is Enum object (eg. gender) (note: opensocial uses "gender" for field name, but our Flex constant currently uses "GENDER"
			  								if (tmpProp instanceof opensocial.Enum) {
			  									//alert(tmpProp + " is instanceof Enum");  									
			 	 								returnData.data[count].pAttr[profDet[j]] = {};
			  									returnData.data[count].pAttr[profDet[j]].key = tmpProp.getKey();
			  									returnData.data[count].pAttr[profDet[j]].displayValue = tmpProp.getDisplayValue();
			  								} else {
			  									returnData.data[count].pAttr[profDet[j]] = person.getField(oParam.osParam[j]);
			  								}
			  							break;
			  						} // switch  				
			  					} // for
			  					count++;
						      }//function person
						    );//each
						    
						    returnData.colTotalSize = viewerFriends.getTotalSize();
						    //alert("total size = " + returnData.colTotalSize);
						    returnData.colOffset = viewerFriends.getOffset();
						    //alert("offset = " + returnData.colOffset);
						    returnData.drAddOptKey = oParam.drAddOptKey;
						    //alert("callback key = " + returnData.drAddOptKey);
					   }else {
							returnData.errorMessage = response.getErrorMessage();
							returnData.hadError = response.hadError();
					   }
  						

					   flashobj.fetchPeopleRequestCallback(returnData);
				  	}//fetchPeopleHandler
				  	
			  	}//fetchPeopleRequest
			  	
			  	fetchPeopleRequest(objParam);
		}
		
		]]>
		</script>
   	</mx:XML>
</mx:XMLListCollection>
