#labels Featured
#summary Release note for this client library in English

=Welcome to the !OpenSocial family, !ActionScript3 client library!=

The current generation of social applications have become increasingly interesting and attractive, many sporting fancy animation effects and complex user interactions. One of the exciting consequences of this trend is the growing number of !ActionScript developers in the community.

To support the development of !OpenSocial gadgets using !ActionScript we are happy to introduce a new client library which exposes almost all of the !OpenSocial 0.81 !JavaScript APIs in native !ActionScript 3 for Flash and Flex gadget developers. The library provides an event-driven development model which is prevalent in the !ActionScript community, a !FlexUnit-based testing framework, and samples for both Flash and Flex environments. We hope the library will ease the learning curve for !ActionScript developers and shorten the development cycle. To check out the code, point your browsers to the Source tab linked from the !ActionScript Client Library project page. 

This library is completely open sourced under the Apache 2.0 license, and contributions are not only welcomed but encouraged. In addition to a wiki page explaining the patch submission process, this project hosts an issue tracker which has already been populated with known issues and requested enhancements. This tracker is the best place to start if you're interested in contributing to the project. Please report any new bugs or incompatibilities you find along with any feature requests using the tracker and be sure to star those reported by other developers which are significant to your own development also so they can be prioritized effectively. Also, you are welcome to join the client library discussion forum with your questions and feedback. We look forward to seeing you there!

Included in this release:

  * Most of the !OpenSocial 0.81 client functionalities are covered except batching social data requests. Please refer to the API reference manual generated by ASDoc.

  * Event-driven development model supported. Compared with the popular callback-triggering model in the !JavaScript community, event-driven model has been widely adopted as the common method in the !ActionScript community. Besides of that, the library provides a convenient currying pattern to simplify the situation that only one callback need to be triggered for an asynchronous request.

  * !FlexUnit based testing framework and test suites for core data structures.

  * Two samples are included for both Flash and Flex development environments.

  * There's a important abstract class "!OpenSocialClient" defined in the library, from which all asynchronous requests are sent. A reference implementation "!JsWrapperClient" is also provided that it resides in the !OpenSocial container and calls outer native !JavaScript APIs to implement !OpenSocialClient's functions.

The detailed design doc can be found here: http://opensocial-as3-client.googlecode.com/svn/trunk/doc/index.html

Besides the existing features, this library's scalable architecture provides flexible extensibility on the following aspects:

  * Asynchronous request pattern. As we known, !OpenSocial spec offers multiple data fetching patterns, including !JavaScript API call on the browser side, and RESTful/RPC ones for server-to-server talk. Moreover, there could be more patterns emerge in the future for gadgets to get social data. By inheriting the abstract class !OpenSocialClient, you could extend any patterns by yourself. !JsWrapperClient, which has been included as a reference implementation for the !JavaScript bridging one, could be treated as a perfect example for such extending, and we're looking forward to see !RestfulClient (name to be determined) could implement the server-to-server pattern. The benefits gain from this abstraction is very low cost for developer to migrate the application from one client to the other -- most of the business logic code remains the same while only a bit client initialization code needs to be changed. This feature also helps the code reuse between Flash on browser side and AIR applications.

  * Feature between different containers. Different SNS may offer different features. E.g. user on some of the SNS could manage their videos through !OpenSocial API while others may not. By inheriting the concrete class such like !JsWrapperClient, you could customize client's "feature book" to support more features.


  * Data structure between different containers. For the same feature and data structure, different SNS may have their special attributes to support more functions. E.g. users may change their "familyVideo" field in the Person objects representing themselves. !JsWrapperClient has already supports automatic discovery for extend fields in the outer !JavaScript object, and we are expecting the similar technology could also be applied on the up-coming clients.

Please contact us on http://code.google.com/p/opensocial-as3-client if you have more suggestions or questions. And the most important, welcome to join us on developing more features and extensions! Let's make the world better! :) 